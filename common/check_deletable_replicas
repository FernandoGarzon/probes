#!/usr/bin/env python
# Copyright European Organization for Nuclear Research (CERN) 2013
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Mario Lassnig, <mario.lassnig@cern.ch>, 2013-2014
# - Cedric Serfon, <cedric.serfon@cern.ch>, 2018
# - Fernando Garzon. oscar.fernando.garzon.miguez@cern.ch, 2020

'''
Probe to check the number of deletable files per rse, as well as
the total deletable space per rse.
'''
from __future__ import print_function
import sys
from rucio.db.sqla.constants import ReplicaState
from sqlalchemy import or_
import traceback
from datetime import datetime
from prometheus_client import CollectorRegistry, Gauge, push_to_gateway
from rucio.common.config import config_get
from rucio.core import monitor
from rucio.db.sqla import models
from rucio.db.sqla.session import get_session
from sqlalchemy import func

# Exit statuses
OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3

PROM_SERVERS = config_get('monitor', 'prometheus_servers', raise_exception=False, default='')
if PROM_SERVERS != '':
    PROM_SERVERS = PROM_SERVERS.split(',')

if __name__ == "__main__":
    try:
        registry = CollectorRegistry()
        session = get_session()
        a = session.query(models.RSE.rse.label('Node'),func.count(models.RSEFileAssociation.name).label('Files'), func.sum(models.RSEFileAssociation.bytes).label('bytes')).\
        filter( or_(models.RSEFileAssociation.state != ReplicaState.BAD,
            models.RSEFileAssociation.state!=ReplicaState.UNAVAILABLE,
            models.RSEFileAssociation.state!=ReplicaState.TEMPORARY_UNAVAILABLE,
            models.RSEFileAssociation.tombstone < datetime.utcnow())).join(models.RSEFileAssociation.rse).group_by(models.RSE.rse)
        for result in a.all():
            monitor.record_gauge(stat="rucio.judge.deletable_files.%s" %result[0], value=result[1])
            #Gauge('rucio_judge_deletable_files', '', registry=registry).set(result[1])
        for result in a.all():
            monitor.record_gauge(stat="rucio.judge.deletable_space.%s" %result[0], value=result[2]/1000000000000.0)
            #Gauge('rucio_judge_deletable_space', '', registry=registry).set(result[2]/1000000000000)
        
        if len(PROM_SERVERS):
            for server in PROM_SERVERS:
                try:
                    push_to_gateway(server.strip(), job='check_deletable_files', registry=registry)
                    push_to_gateway(server.strip(), job='check_deletable_space', registry=registry)
                except:
                    continue

    except Exception as error:
        print('THE ERROR IS ',error)
        sys.exit(UNKNOWN)
