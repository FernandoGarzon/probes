#!/usr/bin/env python
# Copyright European Organization for Nuclear Research (CERN) 2013
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Cedric Serfon, <cedric.serfon@cern.ch>, 2020. 
# - Eric Vaandering, <ewv@fnal.gov> 2020.
# - Fernando Garzon, <oscar.fernando.garzon.miguez@cern.ch> 2020.

"""
Probe to check the locked expired rules or datasets with locked rules
"""

from __future__ import print_function

import sys
from datetime import datetime

from rucio.core import monitor
from rucio.db.sqla import models
from rucio.db.sqla.session import BASE, get_session
from sqlalchemy import func

# Exit statuses
OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3

if BASE.metadata.schema:
    schema = BASE.metadata.schema + '.'
else:
    schema = ''


def main():
    """
    Probe to check the locked expired rules or datasets with locked rules
    """
    status = OK
    session = get_session()
    try:
        print('Locked expired rules')
        query = (session.query(
            models.ReplicationRule.id,
            models.ReplicationRule.scope,
            models.ReplicationRule.name,
            models.ReplicationRule.rse_expression)
    .filter(models.ReplicationRule.locked == 1)
    .filter(models.ReplicationRule.expires_at != None)
    .filter(models.ReplicationRule.expires_at < datetime.utcnow()))
        results = query.all()
        for row in results:
            status = CRITICAL
            id = row[0]
            print(id, row[1], row[2])
        print('Locked expired rule counts by RSE expression')
        query = (session.query(
            models.ReplicationRule.scope,
            models.ReplicationRule.rse_expression,func.count(
            models.ReplicationRule.scope))
    .filter(models.ReplicationRule.locked == 1,
            models.ReplicationRule.expires_at <= datetime.utcnow())
    .group_by(models.ReplicationRule.scope,
              models.ReplicationRule.rse_expression))
        for row in query.all():
            print('judge.locked_expired_rules.%s.%s    %s' % (row[0], row[1], row[2]))
            monitor.record_gauge(stat='judge.locked_expired_rules.%s.%s' % (row[0], row[1]), value=row[2])
    except Exception as error:
        print(error)
        status = UNKNOWN
        sys.exit(status)

    try:
        print('Datasets expired with locked rules')
        query = (session.query(
            models.ReplicationRule.id,
            models.ReplicationRule.scope,
            models.ReplicationRule.name,
            models.ReplicationRule.rse_expression)
    .join(models.DataIdentifier,
         (models.ReplicationRule.scope == models.DataIdentifier.scope) &
         (models.ReplicationRule.name == models.DataIdentifier.name))
    .filter(models.ReplicationRule.locked == True)
    .filter(models.DataIdentifier.expired_at is not None)
    .filter(models.DataIdentifier.expired_at < datetime.utcnow()))
        for row in query.all():
            status = CRITICAL
            id = row[0]

        sub_query = (session.query(func.count(
            models.ReplicationRule.id),
            models.ReplicationRule.rse_expression)
    .join(models.DataIdentifier,
          (models.ReplicationRule.scope == models.DataIdentifier.scope) &
          (models.ReplicationRule.name == models.DataIdentifier.name))
    .filter(models.ReplicationRule.locked == True)
    .filter(models.DataIdentifier.expired_at is not None)
    .filter(models.DataIdentifier.expired_at < datetime.utcnow())
    .group_by(models.ReplicationRule.rse_expression))
        dids = sub_query.all()
        for did in dids:
            status = CRITICAL
            monitor.record_gauge(stat='rucio.datasets_with_locked_rules.%s' % did[1], value=did[0])
    except Exception as error:
        print(error)
        status = UNKNOWN
        sys.exit(status)

    sys.exit(status)


if __name__ == '__main__':
    main()
