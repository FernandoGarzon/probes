#!/usr/bin/env python
# Copyright European Organization for Nuclear Research (CERN) 2013
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Eric V. and Fernando G.

'''
Probe to check the locked expired rules or datasets with locked rules
'''

from __future__ import print_function

import sys
from datetime import datetime
from rucio.core import monitor
from rucio.db.sqla.constants import RuleState
from rucio.db.sqla import models
from rucio.db.sqla.session import BASE, get_session
from sqlalchemy import func
from rucio.common.config import config_get
from sqlalchemy.sql import exists
from prometheus_client import CollectorRegistry, Gauge, push_to_gateway


# Exit statuses
OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3

PROM_SERVERS = config_get('monitor', 'prometheus_servers', raise_exception=False, default='')
if PROM_SERVERS != '':
    PROM_SERVERS = PROM_SERVERS.split(',')



if __name__ == "__main__":
    try:
        registry = CollectorRegistry()
        session = get_session()
        sub_query = session.query(models.ReplicationRule).filter(models.ReplicationRule.scope == models.DataIdentifier.scope).\
            filter(models.ReplicationRule.name == models.DataIdentifier.name).filter(models.ReplicationRule.locked == True)

        query = session.query(models.DataIdentifier.scope, models.DataIdentifier.name).filter(models.DataIdentifier.expired_at != None).\
            filter(models.DataIdentifier.expired_at != None).\
                filter(models.DataIdentifier.expired_at < datetime.utcnow()).\
                    filter(sub_query.exists())

        dids = query.all()
        print(query)
        for did in dids:
            supra_query = session.query(models.ReplicationRule.name, models.ReplicationRule.id,models.ReplicationRule.rse_expression, func.count(models.ReplicationRule.scope)).\
              filter(models.ReplicationRule.scope == did[0]).filter(models.ReplicationRule.name == did[1]).\
                group_by(models.ReplicationRule.name,models.ReplicationRule.rse_expression,models.ReplicationRule.id)
            #result = supra_query.one()
            result = supra_query.all()
            #monitor.record_gauge(stat='rucio.judge.expired_locked_rules', value=result[2])
            print(supra_query)
            #print(result)
            print(result)
            #Gauge('rucio_judge_ok_rules', '', registry=registry).set(result[2])

        if len(PROM_SERVERS):
            for server in PROM_SERVERS:
                try:
                    push_to_gateway(server.strip(), job='check_ok_rules', registry=registry)
                except:
                    continue

    except Exception as error:
        print('THE ERROR IS ',error)
        sys.exit(UNKNOWN)(OK)
