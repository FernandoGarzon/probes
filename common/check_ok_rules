#!/usr/bin/env python
# Copyright European Organization for Nuclear Research (CERN) 2013
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Fernando Garzon. oscar.fernando.garzon.miguez@cern.ch

"""
Probe to check the nember of not OK rules.
"""
from __future__ import print_function

from rucio.db.sqla.constants import RuleState
import sys
import traceback
from datetime import datetime
from prometheus_client import CollectorRegistry, Gauge, push_to_gateway
from rucio.common.config import config_get
from rucio.core import monitor
from rucio.db.sqla import models
from rucio.db.sqla.session import get_session
from rucio.db.sqla.util import get_count

# Exit statuses
OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3


PROM_SERVERS = config_get('monitor', 'prometheus_servers', raise_exception=False, default='')
if PROM_SERVERS != '':
    PROM_SERVERS = PROM_SERVERS.split(',')

if __name__ == "__main__":
    try:
        registry = CollectorRegistry()
        session = get_session()
        query = session.query(models.ReplicationRule.scope).filter(models.ReplicationRule.state == RuleState.OK)
        result = get_count(query)
        print(result)
        print(query)
        # Possible check against a threshold. If result > max_value then sys.exit(CRITICAL)

        monitor.record_gauge(stat='rucio.judge.ok_rules', value=result)
        Gauge('rucio_judge_ok_rules', '', registry=registry).set(result)

        if len(PROM_SERVERS):
            for server in PROM_SERVERS:
                try:
                    push_to_gateway(server.strip(), job='check_ok_rules', registry=registry)
                except:
                    continue

    except Exception as error:
        print('THE ERROR IS ',error)
        sys.exit(UNKNOWN)(OK)
