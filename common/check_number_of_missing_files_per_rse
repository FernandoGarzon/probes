#!/usr/bin/env python
# Copyright European Organization for Nuclear Research (CERN) 2013
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Donata Mielaikaite, <donata.mielaikaite@cern.ch>, 2020
# - Fernando Garzon, <oscar.fernando.garzon.miguez@cern.ch> 2020.

"""
Probe to check the number of expected files per rse.
"""

from __future__ import print_function

import sys
from datetime import datetime
from rucio.db.sqla.constants import RuleState
from rucio.db.sqla.constants import RequestType
from rucio.core import monitor
from rucio.db.sqla import models
from rucio.db.sqla.session import BASE, get_session
from sqlalchemy import func

# Exit statuses
OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3

if BASE.metadata.schema:
    schema = BASE.metadata.schema + '.'
else:
    schema = ''

if __name__ == "__main__":
    status = OK
    session = get_session()
    try:
        query = (session.query(models.RSE.rse, func.count(models.Request.id))
        .with_hint(models.Request, "index_fss(%(name)s REQUESTS_TYP_STA_CRE_IDX)")
        .join(models.RSE, (models.Request.dest_rse_id == models.RSE.id))
        .join(models.ReplicationRule, (models.Request.rule_id == models.ReplicationRule.id))
        .filter(models.Request.request_type == RequestType.TRANSFER)
        .filter(models.ReplicationRule.state != RuleState.OK).group_by(models.RSE.rse))
        results = query.all()
        print('Number of missing files per RSE')
        for rse, num in result:
            status = CRITICAL
            monitor.record_gauge(stat='judge.number_of_missing_files.%s' % rse, value=num)
            print(rse,num)
        query = (session.query(models.RSE.rse, func.count(models.Request.id))
        .with_hint(models.Request, "index_fss(%(name)s REQUESTS_TYP_STA_CRE_IDX)")
        .join(models.RSE, (models.Request.dest_rse_id == models.RSE.id))
        .join(models.ReplicationRule, (models.Request.rule_id == models.ReplicationRule.id))
        .filter(models.Request.request_type == RequestType.TRANSFER)
        .filter(models.ReplicationRule.state == RuleState.REPLICATING).group_by(models.RSE.rse))
        results = query.all()
        print('Number of replicating files per RSE')
        for rse, num in result:
            monitor.record_gauge(stat='judge.number_of_replicating_files.%s' % rse, value=num)
            print(rse,num)
    except Exception as error:
        print(error)
        status = UNKNOWN
        sys.exit(status)
    sys.exit(OK)
