#!/usr/bin/env python
# Copyright European Organization for Nuclear Research (CERN) 2013
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Donata Mielaikaite, <donata.mielaikaite@cern.ch>, 2020
# -Fernando Garzon, <oscar.fernando.garzon.miguez@cern.ch> 2020.

"""
Probe to check the number of expected files per rse.
"""

from __future__ import print_function

import sys
from datetime import datetime
from rucio.db.sqla.constants import RuleState
from rucio.core import monitor
from rucio.db.sqla import models
from rucio.db.sqla.session import BASE, get_session
from sqlalchemy import func

# Exit statuses
OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3

if BASE.metadata.schema:
    schema = BASE.metadata.schema + '.'
else:
    schema = ''

if __name__ == "__main__":
    status = OK
    session = get_session()
    try:
        print('Number of expected files per RSE')
        query = (session.query(models.ReplicationRule.rse_expression, func.sum(models.ReplicationRule.copies*models.DataIdentifier.length).label('sum_length')))
        .join(models.DataIdentifier, (models.ReplicationRule.name == models.DataIdentifier.name))
        .filter(models.ReplicationRule.state != RuleState.OK)
        .filter(models.DataIdentifier.length != models.ReplicationRule.locks_ok_cnt)
        .filter(models.DataIdentifier.length != None)
        .filter(models.ReplicationRule.locks_ok_cnt != None).group_by(models.ReplicationRule.rse_expression)
        results = query.all()
        for result in results:
            status = CRITICAL
            monitor.record_gauge(stat='rucio.expected_number_of_files.%s' % result[0], value=result[1])
    except:
        print (traceback.format_exc())
        sys.exit(UNKNOWN)
    sys.exit(OK)

